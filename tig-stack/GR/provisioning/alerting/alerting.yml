# config file version
apiVersion: 1


# # List of rule groups to import or update
groups:
#     # <int> organization ID, default = 1
   - orgId: 1
#     # <string, required> name of the rule group
     name: "Devices"
#     # <string, required> name of the folder the rule group will be stored in
     folder: "Appliances"
#     # <duration, required> interval of the rule group evaluation
     interval: 10s
#     # <list, required> list of rules that are part of the rule group  
     rules:
#       # <string, required> unique identifier for the rule
     - uid: "qbAtMSt4z"
#       # <string, required> title of the rule, will be displayed in the UI
       title: Microwave Oven_Current
       condition: C
       data:
       - refId: A
         queryType: ''
         relativeTimeRange:
           from: 300
           to: 0
         datasourceUid: D1NNU4t4z
         model:
           datasource:
             type: influxdb
             uid: D1NNU4t4z
           intervalMs: 1000
           maxDataPoints: 43200
           query: "from(bucket: \"power\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"appliance\")\n  |> filter(fn: (r) => r[\"_field\"] == \"I\")\n  |> filter(fn: (r) => r[\"appliance\"] == \"Microwave_Oven\")\n  |> aggregateWindow(every: 1s, fn: last, createEmpty: false)\n  |> yield(name: \"last\")"
           refId: A
       - refId: Current
         queryType: ''
         relativeTimeRange:
           from: 300
           to: 0
         datasourceUid: "-100"
         model:
           conditions:
           - evaluator:
               params: []
               type: gt
             operator:
               type: and
             query:
               params:
               - B
             reducer:
               params: []
               type: last
             type: query
           datasource:
             type: __expr__
             uid: "-100"
           expression: A
           hide: false
           intervalMs: 1000
           maxDataPoints: 43200
           reducer: last
           refId: Current
           type: reduce
       - refId: C
         queryType: ''
         relativeTimeRange:
           from: 300
           to: 0
         datasourceUid: "-100"
         model:
           conditions:
           - evaluator:
               params:
               - 8.5
               type: gt
             operator:
               type: and
             query:
               params:
               - C
             reducer:
               params: []
               type: last
             type: query
           datasource:
             type: __expr__
             uid: "-100"
           expression: Current
           hide: false
           intervalMs: 1000
           maxDataPoints: 43200
           refId: C
           type: threshold




#       - refId: "A"
#         datasourceUid: "-100"
#         model:
#           conditions:
#           - evaluator:
#               params:
#               - 3
#               type: gt
#             operator:
#               type: and
#             query:
#               params:
#               - A
#             reducer:
#               type: last
#             type: query
#           datasource:
#             type: __expr__
#             uid: "-100"
#           expression: 1==0
#           intervalMs: 1000
#           maxDataPoints: 43200
#           refId: A
#           type: math


#       # <string> UID of a dashboard that the alert rule should be linked to
       dashboardUid: o8U8WStVk
#       # <int> ID of the panel that the alert rule should be linked to
       panelId: 2
#       # <string> state of the alert rule when no data is returned
#       #          possible values: "NoData", "Alerting", "OK", default = NoData
       noDataState: "NoData"
#       # <string> state of the alert rule when the query execution 
#       #          fails - possible values: "Error", "Alerting", "OK"
#       #          default = Alerting
       executionErrorState: "Error"
#       # <duration, required> how long the alert condition should be breached before Firing. Before this time has elapsed, the alert is considered to be Pending
       for: 0s
#       # <map<string, string>> map of strings to attach arbitrary custom data
       annotations:
         "Dashboard UID": "o8U8WStVk"
         "Panel ID": 2
         "Summary": "The <code>{{ $labels.device }}</code> is drawing {{ humanize $values.Current.Value }} Amps."
#       # <map<string, string> map of strings to filter and 
#       #                      route alerts
#       labels:
#         team: sre_team_1



# List of contact points to import or update

contactPoints:
  # <int> organization ID, default = 1
  - orgId: 1
    # <string, required> name of the contact point
    name: "telegram"
    receivers:
      # <string, required> unique identifier for the receiver
      - uid: "KNKdqVp4k"
        # <string, required> type of the receiver
        type: telegram
        # <object, required> settings for the specific receiver type
        settings:
          bottoken: "5818330332:AAGhvdWAe6xXezcx6Yxc_jxpVPtz4NP3eeg"
          # <string, required>
          chatid: "1099845479"
          # <string>
          message: "{{ template \"telegram.message\" . }}"


# List of notification policies
policies:
  # <int> organization ID, default = 1
  - orgId: 1
    # <string> name of the contact point that should be used for this route
    receiver: "telegram"
    # <list> The labels by which incoming alerts are grouped together. For example,
    #        multiple alerts coming in for cluster=A and alertname=LatencyHigh would
    #        be batched into a single group.
    #
    #        To aggregate by all possible labels use the special value '...' as
    #        the sole label name, for example:
    #        group_by: ['...']
    #        This effectively disables aggregation entirely, passing through all
    #        alerts as-is. This is unlikely to be what you want, unless you have
    #        a very low alert volume or your upstream notification system performs
    #        its own grouping.
    #group_by: ['...']
    # <list> a list of matchers that an alert has to fulfill to match the node
    #matchers:
     # - alertname = Watchdog
     # - severity =~ "warning|critical"
    # <list> Times when the route should be muted. These must match the name of a
    #        mute time interval.
    #        Additionally, the root node cannot have any mute times.
    #        When a route is muted it will not send any notifications, but
    #        otherwise acts normally (including ending the route-matching process
    #        if the `continue` option is not set)
    #mute_time_intervals:
    #  - abc
    # <duration> How long to initially wait to send a notification for a group
    #            of alerts. Allows to collect more initial alerts for the same group.
    #            (Usually ~0s to few minutes), default = 30s
    group_wait: 5s
    # <duration> How long to wait before sending a notification about new alerts that
    #            are added to a group of alerts for which an initial notification has
    #            already been sent. (Usually ~5m or more), default = 5m
    group_interval: 5s
    # <duration>  How long to wait before sending a notification again if it has already
    #             been sent successfully for an alert. (Usually ~3h or more), default = 4h
    repeat_interval: 5s
    # <list> Zero or more child routes
    # routes:
    # ...
    
    
# # List of templates to import or update
templates:
#     # <int> organization ID, default = 1
  - orgID: 1
    # <string, required> name of the template, must be unique
    name: "telegram.message"
    # <string, required> content of the the template
    template: "{{ define \"alert_list\" }}{{ range . }}{{ .Labels.alertname }}\n{{ range .Annotations.SortedPairs }}<strong>{{ .Name }}</strong>: {{ .Value }}\n{{ end }}\n—\n{{ end }}{{ end }}\n{{ define \"telegram.message\" }}\n{{ if gt (len .Alerts.Firing) 0 }}<strong>ALERT!!!</strong>\n—\n{{ template \"alert_list\" .Alerts.Firing }}\n{{ if gt (len .Alerts.Resolved) 0 }}\n{{ end }}{{ end }}{{ if gt (len .Alerts.Resolved) 0 }}<strong>Resolved</strong>\n—\n{{ template \"alert_list\" .Alerts.Resolved }}\n{{ end }}{{ end }}"
    
    
# config file version

# List of orgIds that should be reset to the default policy
#resetPolicies:
  #- 1
    
    
    
